// ============ START TRANSACTION ======
:begin

// =========================================================================================================
// ========================== CREATE CONCEPT_NEW NODES AND RELATIONSHIPS AMONG THEM ========================
// =========================================================================================================

LOAD CSV FROM 'file:///nodes.csv'
AS line
WITH line
MERGE (c:CONCEPT_NEW { id: line[0], label: line[1], synonyms: CASE line[2] WHEN null THEN '' ELSE split(line[2],'|') END, iso: CASE line[3] WHEN null THEN '' else line[3] END, default_parent: CASE line[4] WHEN null THEN '' else line[4] END});

LOAD CSV FROM 'file:///nodes.csv'
AS line
WITH line
MATCH (c:CONCEPT_NEW { id: line[0]})
FOREACH(ignoreMe IN CASE WHEN line[5] = 'TOPIC' THEN [1] ELSE [] END | SET c:TOPIC)
FOREACH(ignoreMe IN CASE WHEN line[5] = 'GEOGRAPHY' THEN [1] ELSE [] END | SET c:GEOGRAPHY)
FOREACH(ignoreMe IN CASE WHEN line[5] = 'DATA_TYPE' THEN [1] ELSE [] END | SET c:DATA_TYPE)
FOREACH(ignoreMe IN CASE WHEN line[5] = 'FREQUENCY' THEN [1] ELSE [] END | SET c:FREQUENCY)
FOREACH(ignoreMe IN CASE WHEN line[5] = 'TIME_PERIOD' THEN [1] ELSE [] END | SET c:TIME_PERIOD)
WITH count(c.id) as updated_nodes

// AFFECTS relationships
LOAD CSV FROM 'file:///affects.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:AFFECTS]->(c2);

// CAN_AFFECT relationships
LOAD CSV FROM 'file:///can_affect.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:CAN_AFFECT]->(c2);

// IS_A relationships
LOAD CSV FROM 'file:///is_a.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:IS_A]->(c2);

// IS_INVOLVED_IN relationships
LOAD CSV FROM 'file:///is_involved_in.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:IS_INVOLVED_IN]->(c2);

// LOCATED_AT relationships
LOAD CSV FROM 'file:///located_at.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:LOCATED_AT]->(c2);

// PART_OF relationships
LOAD CSV FROM 'file:///part_of.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:PART_OF]->(c2);

// QUALITY_OF relationships
LOAD CSV FROM 'file:///quality_of.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:QUALITY_OF]->(c2);

// RELATED_TO relationships
LOAD CSV FROM 'file:///related_to.csv'
AS line
WITH line
MATCH (c1:CONCEPT_NEW { id: line[0]}), (c2:CONCEPT_NEW { id: line[1]})
MERGE (c1)-[:RELATED_TO]->(c2);

// =========================================================================================================
// ============ "REPLICATE" EDGES AMONG DATASETS -> CONCEPT into DATASETS -> CONCEPT_NEW ===================
// =========================================================================================================

MATCH (d:DATASET)-[t:TAGGED_WITH]->(c:CONCEPT)
MATCH (c2:CONCEPT_NEW)
WHERE c.id = c2.id
MERGE (d)-[:TAGGED_WITH {application: t.application}]->(c2);

// =========================================================================================================
// ============ "REPLICATE" EDGES AMONG WIDGETS -> CONCEPT into WIDGETS -> CONCEPT_NEW =====================
// =========================================================================================================

MATCH (w:WIDGET)-[t:TAGGED_WITH]->(c:CONCEPT)
MATCH (c2:CONCEPT_NEW)
WHERE c.id = c2.id
MERGE (w)-[:TAGGED_WITH {application: t.application}]->(c2);

// =========================================================================================================
// ============ "REPLICATE" EDGES AMONG LAYERS -> CONCEPT into LAYERS -> CONCEPT_NEW =======================
// =========================================================================================================

MATCH (l:LAYER)-[t:TAGGED_WITH]->(c:CONCEPT)
MATCH (c2:CONCEPT_NEW)
WHERE c.id = c2.id
MERGE (l)-[:TAGGED_WITH {application: t.application}]->(c2);

// =========================================================================================================
// ============================== DETACH AND DELETE "OLD" CONCEPT NODES ====================================
// =========================================================================================================

MATCH (c:CONCEPT)
DETACH DELETE c;

// =========================================================================================================
// =========================== ADD CONCEPT LABEL TO CONCEPT_NEW NODES ======================================
// =========================================================================================================

MATCH (c:CONCEPT_NEW)
SET c :CONCEPT;

// =========================================================================================================
// =========================== REMOVE CONCEPT_NEW LABEL FROM CONCEPT NODES =================================
// =========================================================================================================

MATCH (c:CONCEPT_NEW)
REMOVE c :CONCEPT_NEW;

// ============ COMMIT TRANSACTION ======
:commit
